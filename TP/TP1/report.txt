Q1-1 For which reason is it better to run the container with a flag -e to give the environment variables rather than put them directly in the Dockerfile ?

If we place sensitive data like passwords or API keys with ENV is a high security risk. Anyone who gets access to the image can find and steal these data. Using the flag -e does not save these variables in the image and keeps safe.

------------------------------------------------------------------------------------------------

Q1-2 Why do we need a volume to be attached to our postgres container?


To persist data safely, we need a volume because it is managed by Docker and exists outside the container's lifecycle. It means that when we update, delete or add in the database, all changes are saved to the volume. If a bug or mistake occur, data is preserved. 

------------------------------------------------------------------------------------------------

Q1-3 Document your database container essentials: commands and Dockerfile.

Dockerfile:

FROM postgres:17.2-alpine
ENV POSTGRES_DB=db \
    POSTGRES_USER=usr \
    POSTGRES_PASSWORD=pwd

Then 

FROM postgres:17.2-alpine

COPY *.sql /docker-entrypoint-initdb.d/


Bash:

$ docker build -t igor/databaseimage .
$ docker network create app-network
$ docker run \
    --name igordatabase \
    --net=app-network \
    -d \
    -e POSTGRES_DB=db \
    -e POSTGRES_USER=usr \
    -e POSTGRES_PASSWORD=pwd \
    -v pg-data:/var/lib/postgresql/data \
    igor/databaseimage
$ docker run \
    --name adminer \
    -p "8090:8080" \
    --net=app-network \
    -d \
    adminer

------------------------------------------------------------------------------------------------

Q1-4 Why do we need a multistage build? And explain each step of this dockerfile.

In the image, we still have elements we do not need or use, so with multistage, we can remove some files or elements (like jdk) to have a smaller, cleaner and lighter image.


# Build stage
FROM eclipse-temurin:21-jdk-alpine AS myapp-build
#Image with JDK

ENV MYAPP_HOME=/opt/myapp
#Set an environment variable

WORKDIR $MYAPP_HOME
#Set an environment variable

RUN apk add --no-cache maven
#Install maven

COPY pom.xml .
COPY src ./src
#Copy these files into the image

RUN mvn package -DskipTests
#Run maven command to build the project

# Run stage
FROM eclipse-temurin:21-jre-alpine
#Image with only JRE, without JDK

ENV MYAPP_HOME=/opt/myapp
WORKDIR $MYAPP_HOME
#Same as the previous step

COPY --from=myapp-build $MYAPP_HOME/target/*.jar $MYAPP_HOME/myapp.jar
#We copy the jar file from the previous stage and we copy it in the new image without jdk

ENTRYPOINT ["java", "-jar", "myapp.jar"]


TP Part 2 

2-1 What are testcontainers?
Test containers permit to run automated testes with docker containers. 

2-2 For what purpose do we need to use secured variables ?
To hide confidential data



TP part 3
3-1 Document your inventory and base commands

ansible all -i inventories/setup.yml -m ping 
igor.guo.takima.cloud | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3.11"
    },
    "changed": false,
    "ping": "pong"
}

ansible all -i inventories/setup.yml -m setup -a "filter=ansible_distribution*"
igor.guo.takima.cloud | SUCCESS => {
    "ansible_facts": {
        "ansible_distribution": "Debian",
        "ansible_distribution_file_parsed": true,
        "ansible_distribution_file_path": "/etc/os-release",
        "ansible_distribution_file_variety": "Debian",
        "ansible_distribution_major_version": "12",
        "ansible_distribution_minor_version": "7",
        "ansible_distribution_release": "bookworm",
        "ansible_distribution_version": "12.7",
        "discovered_interpreter_python": "/usr/bin/python3.11"
    },
    "changed": false
}

ansible all -i inventories/setup.yml -m apt -a "name=apache2 state=absent" --become
igor.guo.takima.cloud | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3.11"
    },
    "changed": false
}

ansible-playbook -i inventories/setup.yml playbook.yml
ok: [igor.guo.takima.cloud]

PLAY RECAP ************************************************************************************************************************************************************
igor.guo.takima.cloud      : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  



